/********************************************************************++
Copyright (c) Microsoft Corporation.  All rights reserved.
--********************************************************************/

using System;
using System.Text;

namespace Microsoft.PowerShell
{
    internal readonly struct MeasurementResult
    {
        public readonly int Offset;
        public readonly int CursorMovements;
        public readonly int Columns;

        public MeasurementResult(int offset, int cursorMovements, int columns)
        {
            Offset = offset;
            CursorMovements = cursorMovements;
            Columns = columns;
        }
    }

    public partial class PSConsoleReadLine
    {
        // BEGIN: Tables as generated by Windows Terminals' GraphemeTableGen
        //
        // I've updated the table generator to store all ambiguous width characters as narrow
        // because pwsh shouldn't need to support anything else.
        // I've also set U+FE0F to wide, because pwsh doesn't need support for disabling graphemes.
        // It's 7433 bytes.

        private static readonly byte[] s_stage0 = {
            0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x33, 0x33, 0x36, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
            0x33, 0x33, 0x33, 0x33, 0x3c, 0x44, 0x4c, 0x4d, 0x4e, 0x48, 0x50, 0x58, 0x58, 0x58, 0x58, 0x5f,
            0x67, 0x6d, 0x75, 0x7d, 0x58, 0x58, 0x85, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x8b, 0x33, 0x33,
            0x93, 0x9b, 0x58, 0x58, 0x58, 0xa1, 0xa9, 0xad, 0x58, 0xb2, 0xba, 0xc0, 0xc8, 0xd0, 0xd8, 0xe0,
            0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
            0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xe8,
            0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
            0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xe8,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0xf0, 0xf2, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
            0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
        };

        private static readonly ushort[] s_stage1 = {
            0x0000, 0x000b, 0x000b, 0x001b, 0x0023, 0x002c, 0x003c, 0x004c,
            0x005c, 0x006c, 0x007c, 0x008c, 0x009c, 0x00ac, 0x00bc, 0x00cb,
            0x00d9, 0x00e9, 0x000b, 0x00f9, 0x000b, 0x000b, 0x000b, 0x0108,
            0x0118, 0x0126, 0x0135, 0x0145, 0x0155, 0x000f, 0x000b, 0x000b,
            0x0165, 0x0175, 0x000b, 0x0184, 0x0194, 0x01a1, 0x01b1, 0x01c1,
            0x000b, 0x01ce, 0x000b, 0x01de, 0x01e4, 0x01f4, 0x0204, 0x0214,
            0x0223, 0x0233, 0x0242, 0x024c, 0x024c, 0x024c, 0x024c, 0x024c,
            0x024c, 0x024c, 0x024c, 0x0250, 0x024c, 0x024c, 0x024c, 0x024c,
            0x0260, 0x000b, 0x026d, 0x000b, 0x027d, 0x028d, 0x029c, 0x02ac,
            0x02bc, 0x02be, 0x02c0, 0x02c2, 0x02bd, 0x02bf, 0x02c1, 0x02bc,
            0x02be, 0x02c0, 0x02c2, 0x02bd, 0x02bf, 0x02c1, 0x02bc, 0x02cc,
            0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b,
            0x024c, 0x024c, 0x02dc, 0x000b, 0x000b, 0x02ec, 0x02fc, 0x000b,
            0x030c, 0x031c, 0x032b, 0x000b, 0x000b, 0x000b, 0x000b, 0x033b,
            0x000b, 0x000b, 0x034a, 0x0350, 0x0360, 0x0370, 0x0380, 0x038e,
            0x039e, 0x03ab, 0x03b8, 0x03c6, 0x03d5, 0x03e3, 0x03f0, 0x0400,
            0x000b, 0x040e, 0x041b, 0x0425, 0x0435, 0x000b, 0x000b, 0x000b,
            0x000b, 0x0442, 0x000b, 0x000b, 0x000b, 0x0448, 0x0458, 0x000b,
            0x000b, 0x000b, 0x0464, 0x024c, 0x024c, 0x024c, 0x024c, 0x024c,
            0x024c, 0x024c, 0x0474, 0x024c, 0x024c, 0x024c, 0x024c, 0x0484,
            0x0494, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b,
            0x0495, 0x024c, 0x04a5, 0x04ac, 0x000b, 0x000b, 0x000b, 0x000b,
            0x000b, 0x04bc, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b,
            0x000b, 0x04cc, 0x000b, 0x04d6, 0x04e2, 0x000b, 0x000b, 0x000b,
            0x000b, 0x000b, 0x04f2, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b,
            0x0502, 0x0458, 0x050b, 0x000b, 0x051a, 0x000b, 0x000b, 0x000b,
            0x0529, 0x0537, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b,
            0x0547, 0x0557, 0x0567, 0x0577, 0x0587, 0x0597, 0x05a7, 0x05b7,
            0x05c7, 0x05d7, 0x05e7, 0x000b, 0x05f7, 0x05f7, 0x05f7, 0x05f8,
            0x024c, 0x024c, 0x024c, 0x024c, 0x024c, 0x024c, 0x024c, 0x0608,
            0x0618, 0x0628, 0x0637, 0x0637, 0x0637, 0x0637, 0x0637, 0x0637,
            0x0637, 0x0637,
        };

        private static readonly ushort[] s_stage2 = {
            0x0000, 0x0000, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0011, 0x0000, 0x0000, 0x0021, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031,
            0x0031, 0x0031, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0041, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0030, 0x0031, 0x0051, 0x005f, 0x0010, 0x0010, 0x0010, 0x006f, 0x007f, 0x0010, 0x0010,
            0x008c, 0x0031, 0x0010, 0x009b, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x00a5, 0x00b4, 0x0010, 0x00c2, 0x00d2, 0x0010, 0x0031,
            0x00e2, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x004b, 0x009b, 0x0010, 0x0010, 0x008c, 0x00e9, 0x0010, 0x00f7, 0x0103, 0x0010,
            0x0010, 0x0111, 0x0010, 0x0010, 0x0010, 0x0121, 0x0010, 0x0010, 0x0075, 0x0031, 0x012f, 0x0031, 0x0098, 0x013f, 0x0144, 0x014a,
            0x0158, 0x0168, 0x0178, 0x0180, 0x0190, 0x013f, 0x01a0, 0x01af, 0x01bd, 0x01cb, 0x0178, 0x01da, 0x0190, 0x0010, 0x0010, 0x01dc,
            0x01ea, 0x00d2, 0x0010, 0x01f6, 0x0190, 0x013f, 0x01a0, 0x0206, 0x0214, 0x0010, 0x0178, 0x0222, 0x0190, 0x013f, 0x01a0, 0x0206,
            0x01bd, 0x0232, 0x0178, 0x0240, 0x024e, 0x0010, 0x0010, 0x009d, 0x025e, 0x0249, 0x0010, 0x0010, 0x0097, 0x013f, 0x01a0, 0x026e,
            0x027c, 0x028a, 0x0178, 0x0010, 0x0190, 0x0010, 0x0010, 0x01dc, 0x029a, 0x02a8, 0x0178, 0x024d, 0x0098, 0x013f, 0x0144, 0x02b8,
            0x02c6, 0x0249, 0x0178, 0x0010, 0x0190, 0x0010, 0x0010, 0x0010, 0x02d5, 0x02e4, 0x0010, 0x0178, 0x0010, 0x0010, 0x0010, 0x02f4,
            0x02ff, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x030e, 0x031b, 0x0010, 0x0010, 0x0010, 0x032a, 0x0010, 0x0335, 0x0010,
            0x0010, 0x0010, 0x0030, 0x0343, 0x0350, 0x0031, 0x0034, 0x024a, 0x0010, 0x0010, 0x0010, 0x0360, 0x036d, 0x0010, 0x037c, 0x038b,
            0x00bd, 0x0399, 0x03a9, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x03b9, 0x03b9, 0x03b9, 0x03b9, 0x03b9, 0x03b9, 0x03c9,
            0x03c9, 0x03c9, 0x03c9, 0x03d1, 0x03d9, 0x03d9, 0x03d9, 0x03d9, 0x03d9, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009e, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x03e9, 0x0010, 0x03f7, 0x0010, 0x0178, 0x0010, 0x0178,
            0x0010, 0x0010, 0x0010, 0x004d, 0x0031, 0x00e9, 0x0010, 0x0010, 0x03fc, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x02a8, 0x0010, 0x00ed, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0133, 0x0133, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0090, 0x0010, 0x0010, 0x0010, 0x040c, 0x041c, 0x0421, 0x0010, 0x0010, 0x0010,
            0x0031, 0x0032, 0x0010, 0x0010, 0x0010, 0x0097, 0x0010, 0x0010, 0x004d, 0x0097, 0x0010, 0x008c, 0x0098, 0x0099, 0x0010, 0x042f,
            0x0010, 0x0010, 0x0010, 0x004b, 0x0098, 0x0010, 0x0010, 0x004d, 0x00e5, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0154, 0x0434, 0x043d, 0x0447, 0x0010, 0x0457, 0x0466, 0x0469, 0x0010, 0x0479, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0031, 0x0031, 0x009b, 0x0010, 0x0010, 0x0489, 0x0469, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0495, 0x049f,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x04aa, 0x04b6, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x04c1, 0x0010, 0x0010, 0x0010,
            0x04ca, 0x0010, 0x04da, 0x04ea, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0489, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x04f5, 0x04c3, 0x04c9, 0x0010, 0x0010,
            0x0501, 0x0511, 0x051e, 0x0524, 0x0524, 0x052c, 0x0538, 0x0524, 0x0525, 0x0542, 0x0552, 0x0561, 0x056d, 0x0576, 0x0580, 0x0558,
            0x058e, 0x059c, 0x05a9, 0x05b5, 0x04fc, 0x05c1, 0x05d0, 0x05dd, 0x0010, 0x0010, 0x05e8, 0x04c8, 0x05ef, 0x0010, 0x0010, 0x0010,
            0x0010, 0x04a4, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x05ff, 0x0607,
            0x0010, 0x0010, 0x0010, 0x0613, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x009c, 0x009a, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009c, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0031, 0x0031, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0623, 0x0629, 0x0623, 0x0623,
            0x0623, 0x0623, 0x0623, 0x0635, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623,
            0x0623, 0x0645, 0x0010, 0x0623, 0x0623, 0x0655, 0x0665, 0x0622, 0x0623, 0x0623, 0x0623, 0x0623, 0x0675, 0x0623, 0x0623, 0x0623,
            0x0623, 0x0623, 0x0623, 0x061e, 0x0623, 0x0623, 0x0622, 0x0623, 0x0623, 0x0623, 0x0623, 0x0624, 0x0623, 0x0623, 0x0623, 0x0623,
            0x0623, 0x0681, 0x0623, 0x0624, 0x0623, 0x0623, 0x0690, 0x0623, 0x0623, 0x0623, 0x0623, 0x06a0, 0x0623, 0x0623, 0x0623, 0x0623,
            0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x06aa, 0x0623, 0x0623, 0x0623, 0x06b0, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x009c, 0x06c0, 0x0010, 0x009d, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009a, 0x06ce, 0x0010, 0x06db,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009a, 0x0010, 0x0010, 0x004d, 0x035a, 0x0010, 0x0031, 0x06eb, 0x0010, 0x0010, 0x06f4,
            0x0010, 0x0078, 0x0098, 0x03b9, 0x0704, 0x0098, 0x0010, 0x0010, 0x004e, 0x009b, 0x0010, 0x024b, 0x0010, 0x0010, 0x0076, 0x00e6,
            0x0711, 0x0010, 0x0010, 0x071f, 0x0010, 0x0010, 0x0010, 0x072f, 0x00d2, 0x0010, 0x008c, 0x02a8, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x073a, 0x0010, 0x074a, 0x074e, 0x075b, 0x0752,
            0x075b, 0x0756, 0x075b, 0x074a, 0x074e, 0x075b, 0x0752, 0x075b, 0x0756, 0x075b, 0x074a, 0x074e, 0x075b, 0x0752, 0x075b, 0x0756,
            0x075b, 0x074a, 0x074e, 0x075b, 0x0752, 0x075b, 0x0767, 0x03c9, 0x0777, 0x03d9, 0x03d9, 0x0782, 0x0010, 0x0242, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0792, 0x06ad, 0x0031, 0x0623,
            0x0623, 0x07a2, 0x07ab, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x07b7, 0x0622, 0x0623, 0x0623, 0x0623,
            0x0623, 0x0623, 0x07b6, 0x0010, 0x0010, 0x07c7, 0x0010, 0x0010, 0x0010, 0x0010, 0x06b0, 0x07d7, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0243, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009b, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0091, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x07e6, 0x0010, 0x0010, 0x07f6, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x02a8, 0x0010, 0x0010, 0x07ee, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0806, 0x0010, 0x0010, 0x0010, 0x0010, 0x009e,
            0x0010, 0x0010, 0x0010, 0x0010, 0x004b, 0x009b, 0x0010, 0x0010, 0x03e9, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0099, 0x0010, 0x0010, 0x0077, 0x00e6, 0x0010, 0x0010, 0x0816, 0x0099, 0x0010, 0x0010, 0x0825, 0x0833, 0x0010, 0x0010, 0x0010,
            0x0099, 0x0010, 0x0078, 0x0097, 0x02a8, 0x0010, 0x0010, 0x024d, 0x0099, 0x0010, 0x0010, 0x004e, 0x0843, 0x0010, 0x0010, 0x0010,
            0x009f, 0x0851, 0x00d2, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009c, 0x00e2, 0x0010, 0x0098, 0x0010,
            0x0010, 0x0860, 0x086e, 0x0249, 0x087c, 0x0097, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x004c, 0x00e6,
            0x0242, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0031, 0x0098, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x009c, 0x0428, 0x009b, 0x0889, 0x0010, 0x0010, 0x0010, 0x0031, 0x009b, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x008c, 0x00e5, 0x0010, 0x0010, 0x0010, 0x0010, 0x009e, 0x0899, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009f, 0x00e2, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x08a9, 0x08b7, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x08c6, 0x08d5, 0x0010,
            0x08e4, 0x0010, 0x0010, 0x08f1, 0x0249, 0x00e1, 0x0010, 0x0010, 0x0900, 0x00e3, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x009c, 0x090a, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x004f, 0x0350, 0x00e6, 0x0010, 0x0010, 0x0010, 0x0010, 0x091a, 0x0929,
            0x0010, 0x0010, 0x0010, 0x008d, 0x0109, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0936, 0x0946, 0x0010, 0x0010, 0x0952, 0x0099, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0962, 0x004a, 0x035a, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0097, 0x0010, 0x0010, 0x0010, 0x00e6, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009c, 0x0030, 0x0031, 0x0031, 0x0972, 0x0099, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0982, 0x009a, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623,
            0x0623, 0x0623, 0x0623, 0x0690, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623,
            0x0623, 0x0645, 0x0010, 0x0010, 0x06ae, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0992, 0x0623, 0x0623, 0x07b4, 0x09a1, 0x0010, 0x09b1, 0x09bd, 0x0623, 0x0623, 0x0623, 0x0623,
            0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x06ab, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x09c5, 0x0462, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0031, 0x0031, 0x0033, 0x0031,
            0x00e6, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x09d4, 0x09e1, 0x09ee, 0x0010,
            0x09fa, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x03f7, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0031, 0x0031, 0x0031, 0x089e, 0x0031, 0x0031, 0x0034, 0x024b, 0x024c, 0x008c, 0x0030, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x090a, 0x0425, 0x0a0a, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009c, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0242, 0x0010, 0x0010, 0x0010, 0x009f, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x009f, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x00e6, 0x0010, 0x0010, 0x0010, 0x0010, 0x031f, 0x0010, 0x0010, 0x0010, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0580, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524,
            0x0524, 0x0524, 0x0524, 0x0525, 0x0524, 0x0524, 0x0524, 0x048c, 0x0010, 0x04ca, 0x0010, 0x0010, 0x0010, 0x048d, 0x0a1a, 0x05f0,
            0x0a2a, 0x048c, 0x0524, 0x0524, 0x0524, 0x0a3a, 0x0a40, 0x0a50, 0x0a60, 0x0a6b, 0x0a78, 0x0a88, 0x0522, 0x0536, 0x0524, 0x0524,
            0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0a98, 0x0a98, 0x0aa7, 0x0ab4, 0x0a98, 0x0a98, 0x0a98, 0x0abb, 0x0a98,
            0x0538, 0x0a98, 0x0a98, 0x0ac9, 0x0538, 0x0a98, 0x0ad8, 0x0a98, 0x0a98, 0x0a98, 0x0a99, 0x0ae8, 0x0a98, 0x0a98, 0x0a98, 0x0a98,
            0x0a98, 0x0a98, 0x0a98, 0x0a98, 0x0a98, 0x0a98, 0x0aeb, 0x0a98, 0x0a98, 0x0a98, 0x0afa, 0x0b08, 0x0a98, 0x0534, 0x0558, 0x0524,
            0x0566, 0x0580, 0x0524, 0x0524, 0x0524, 0x0524, 0x0529, 0x0a98, 0x0a98, 0x0a98, 0x0a98, 0x0a98, 0x0010, 0x0010, 0x0010, 0x0a98,
            0x0a98, 0x0a98, 0x0a98, 0x0b18, 0x0b28, 0x056f, 0x0b30, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0b40, 0x0010,
            0x0010, 0x0010, 0x0010, 0x0010, 0x0b50, 0x0a9c, 0x0523, 0x048d, 0x0010, 0x0010, 0x0010, 0x0b60, 0x048f, 0x0010, 0x0010, 0x0b60,
            0x0010, 0x0b70, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0b80, 0x0a98, 0x0a98, 0x0b8c, 0x0b91, 0x0a98, 0x0a98, 0x0a98, 0x0a98,
            0x0a98, 0x0a98, 0x0a98, 0x0a98, 0x0a98, 0x0a98, 0x0a98, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0a9b, 0x0a9f,
            0x0a98, 0x0a98, 0x0b98, 0x0ba7, 0x0a9c, 0x0a9f, 0x0a9f, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524,
            0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0524, 0x0bb7, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623,
            0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0623, 0x0bc7, 0x0bd7, 0x0000, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031,
            0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0031, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
        };

        private static readonly byte[] s_stage3 = {
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x01, 0x4c,
            0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
            0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x04,
            0x04, 0x04, 0x04, 0x04, 0x04, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x01, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x04, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x02, 0x02,
            0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x04, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02,
            0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40,
            0x40, 0x04, 0x04, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b,
            0x4b, 0x4b, 0x4b, 0x4b, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x0a, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b,
            0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x40, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b,
            0x40, 0x4b, 0x40, 0x40, 0x40, 0x4b, 0x4b, 0x4b, 0x4b, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x0a, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x4b, 0x4b, 0x40, 0x4b, 0x4b, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40,
            0x40, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4b, 0x40, 0x4b, 0x4b, 0x40, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b,
            0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02,
            0x02, 0x0a, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4b, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x4b, 0x4b,
            0x40, 0x4b, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
            0x02, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x4b, 0x4b,
            0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x0a, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
            0x02, 0x40, 0x4b, 0x4b, 0x4b, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
            0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b,
            0x4b, 0x4b, 0x4b, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x40,
            0x02, 0x02, 0x02, 0x0a, 0x44, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
            0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x40, 0x42, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02,
            0x40, 0x42, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40,
            0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x00, 0x00, 0x00,
            0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x02, 0x00, 0x02, 0x02, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x02, 0x40, 0x40, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85,
            0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46,
            0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
            0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x01, 0x02, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x00, 0x02, 0x00,
            0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40,
            0x40, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x01, 0x02, 0x0d, 0x01, 0x01, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x41,
            0x41, 0x01, 0x01, 0x01, 0x01, 0x01, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x01, 0x01, 0x01, 0x01, 0x01, 0x41, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x8c, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x80,
            0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x8c, 0x40, 0x40,
            0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c,
            0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x8c, 0x8c,
            0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x40, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x8c, 0x8c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x8c, 0x40, 0x40, 0x4c, 0x4c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x4c, 0x40, 0x4c,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x40, 0x8c,
            0x40, 0x40, 0x40, 0x8c, 0x8c, 0x8c, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x8c, 0x8c,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x8c, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x8c, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x8c, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x02, 0x02,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x8c, 0x80, 0x8c, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
            0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x40, 0x40, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85,
            0x85, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x02, 0x00, 0x40, 0x40, 0x02,
            0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x40, 0x88, 0x89, 0x89, 0x89, 0x89, 0x89,
            0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x88, 0x89, 0x89, 0x89, 0x89, 0x89,
            0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x40, 0x40,
            0x40, 0x40, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x40, 0x40,
            0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x82, 0x80, 0x80, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x01, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x01, 0x01, 0x01, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
            0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x40, 0x40, 0x04, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x04, 0x40, 0x40, 0x02, 0x40, 0x44, 0x44, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02,
            0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02,
            0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
            0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x44, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x44, 0x02, 0x02, 0x02, 0x02,
            0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x44,
            0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x44, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40,
            0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x02, 0x80, 0x80, 0x80, 0x80, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x80,
            0x80, 0x40, 0x40, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x80, 0x80, 0x80, 0x40, 0x40, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
            0x40, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
            0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40,
            0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x40, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
            0x80, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x8c, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
            0x8c, 0x8c, 0x8c, 0x80, 0x4c, 0x4c, 0x4c, 0x4c, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
            0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c,
            0x8c, 0x8c, 0x8c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x8c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c,
            0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c,
            0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c,
            0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c,
            0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c,
            0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x8c, 0x8c, 0x8c,
            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x40, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
            0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
            0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x41, 0x01, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
        };

        private static readonly uint[][] s_joinRules = {
            new uint[]{
                0b00000011110011111111111111001111,
                0b00001111111111111111111111111111,
                0b00000011110011111111111111001111,
                0b00000011110011111111111101001111,
                0b00000000000000000000000000001100,
                0b00000011110000001100001111001111,
                0b00000011110011110000111111001111,
                0b00000011110011110011111111001111,
                0b00000011110011110000111111001111,
                0b00000011110011110011111111001111,
                0b00000011000011111111111111001111,
                0b00000011110011111111111111001111,
                0b00000011110011111111111111001111,
                0b00000000110011111111111111001111,
                0b00000000000000000000000000000000,
                0b00000000000000000000000000000000,
            },
            new uint[]{
                0b00000011110011111111111111001111,
                0b00001111111111111111111111111111,
                0b00000011110011111111111111001111,
                0b00000011110011111111111111001111,
                0b00000000000000000000000000001100,
                0b00000011110000001100001111001111,
                0b00000011110011110000111111001111,
                0b00000011110011110011111111001111,
                0b00000011110011110000111111001111,
                0b00000011110011110011111111001111,
                0b00000011000011111111111111001111,
                0b00000011110011111111111111001111,
                0b00000011110011111111111111001111,
                0b00000000110011111111111111001111,
                0b00000000000000000000000000000000,
                0b00000000000000000000000000000000,
            },
        };

        private static int UcdLookup(uint cp)
        {
            var s0 = s_stage0[cp >> 11];
            var s1 = s_stage1[s0 + ((cp >> 8) & 7)];
            var s2 = s_stage2[s1 + ((cp >> 4) & 15)];
            var s3 = s_stage3[s2 + ((cp >> 0) & 15)];
            return s3;
        }

        private static uint UcdGraphemeJoins(uint state, int lead, int trail)
        {
            var l = lead & 15;
            var t = trail & 15;
            return (s_joinRules[state][l] >> (t * 2)) & 3;
        }

        private static bool UcdGraphemeDone(uint state)
        {
            return state == 3;
        }

        private static int UcdToCharacterWidth(int val)
        {
            return val >> 6;
        }

        // END: Tables as generated by Windows Terminals' GraphemeTableGen

        private static int Utf16NextOrFFFD(string str, int offset, out uint cp)
        {
            uint c = str[offset];
            offset += 1;

            // Is any surrogate?
            if ((c & 0xF800) == 0xD800)
            {
                var c1 = c;
                c = 0xfffd;

                // Is leading surrogate and not at end?
                if ((c1 & 0x400) == 0 && offset < str.Length)
                {
                    var c2 = str[offset];
                    // Is also trailing surrogate!
                    if ((c2 & 0xFC00) == 0xDC00)
                    {
                        c = (c1 << 10) - 0x35FDC00 + c2;
                        offset += 1;
                    }
                }
            }

            cp = c;
            return offset;
        }

        private static int utf16PrevOrFFFD(string str, int offset, out uint cp)
        {
            offset -= 1;
            uint c = str[offset];

            // Is any surrogate?
            if ((c & 0xF800) == 0xD800)
            {
                var c2 = c;
                c = 0xfffd;

                // Is trailing surrogate and not at begin?
                if ((c2 & 0x400) != 0 && offset != 0)
                {
                    uint c1 = str[offset - 1];
                    // Is also leading surrogate!
                    if ((c1 & 0xFC00) == 0xD800)
                    {
                        c = (c1 << 10) - 0x35FDC00 + c2;
                        offset -= 1;
                    }
                }
            }

            cp = c;
            return offset;
        }

        internal static MeasurementResult MeasureForward(string str, int offset = 0, int maxCursorMovements = int.MaxValue, int maxColumns = int.MaxValue)
        {
            var cursorMovements = 0;
            var columns = 0;

            if (offset < str.Length && maxCursorMovements > 0 && maxColumns > 0)
            {
                var offsetTrail = Utf16NextOrFFFD(str, offset, out var cp);
                var lead = UcdLookup(cp);

                while (true)
                {
                    var offsetLead = offsetTrail;
                    var width = 0;
                    uint state = 0;

                    while (true)
                    {
                        width += UcdToCharacterWidth(lead);

                        if (offsetTrail >= str.Length)
                        {
                            break;
                        }

                        offsetTrail = Utf16NextOrFFFD(str, offsetTrail, out cp);
                        var trail = UcdLookup(cp);
                        state = UcdGraphemeJoins(state, lead, trail);
                        lead = trail;

                        if (UcdGraphemeDone(state))
                        {
                            break;
                        }

                        offsetLead = offsetTrail;
                    }

                    width = Math.Min(2, width);

                    if (columns + width > maxColumns || cursorMovements + 1 > maxCursorMovements)
                    {
                        break;
                    }

                    offset = offsetLead;
                    cursorMovements += 1;
                    columns += width;

                    if (offset >= str.Length)
                    {
                        break;
                    }
                }
            }

            return new MeasurementResult(offset, cursorMovements, columns);
        }

        internal static MeasurementResult MeasureBackward(string str, int offset = 0, int maxCursorMovements = int.MaxValue, int maxColumns = int.MaxValue)
        {
            var cursorMovements = 0;
            var columns = 0;

            if (offset > 0 && maxCursorMovements > 0 && maxColumns > 0)
            {
                var offsetLead = utf16PrevOrFFFD(str, offset, out var cp);
                var trail = UcdLookup(cp);

                while (true)
                {
                    var offsetTrail = offsetLead;
                    var width = 0;
                    uint state = 0;

                    while (true)
                    {
                        width += UcdToCharacterWidth(trail);

                        if (offsetLead <= 0)
                        {
                            break;
                        }

                        offsetLead = utf16PrevOrFFFD(str, offsetLead, out cp);
                        var lead = UcdLookup(cp);
                        state = UcdGraphemeJoins(state, lead, trail);
                        trail = lead;

                        if (UcdGraphemeDone(state))
                        {
                            break;
                        }

                        offsetTrail = offsetLead;
                    }

                    width = Math.Min(2, width);

                    if (columns + width > maxColumns || cursorMovements + 1 > maxCursorMovements)
                    {
                        break;
                    }

                    offset = offsetTrail;
                    cursorMovements += 1;
                    columns += width;

                    if (offset <= 0)
                    {
                        break;
                    }
                }
            }

            return new MeasurementResult(offset, cursorMovements, columns);
        }

        internal static MeasurementResult MeasureForwardVT(string str, int offset = 0, int maxCursorMovements = int.MaxValue, int maxColumns = int.MaxValue)
        {
            var cursorMovements = 0;
            var columns = 0;

            while (offset < str.Length)
            {
                var escapeBegin = str.IndexOf('\x1b', offset);
                if (escapeBegin < 0)
                {
                    escapeBegin = str.Length;
                }

                var res = MeasureForward(str.Substring(offset, escapeBegin - offset));
                cursorMovements += res.CursorMovements;
                columns += res.Columns;

                offset = str.IndexOf('m', escapeBegin);
                if (offset < 0)
                {
                    offset = str.Length;
                }
            }

            return  new MeasurementResult(offset, cursorMovements, columns);
        }

        private void WriteBlankLines(int count)
        {
            _console.BlankRestOfLine();
            for (int i = 1; i < count; i++)
            {
                _console.Write("\n");
                _console.BlankRestOfLine();
            }
        }

        private void WriteBlankLines(int top, int count)
        {
            var savedCursorLeft = _console.CursorLeft;
            var savedCursorTop = _console.CursorTop;

            _console.SetCursorPosition(left: 0, top);
            WriteBlankLines(count);
            _console.SetCursorPosition(savedCursorLeft, savedCursorTop);
        }

        private void WriteBlankRestOfLine(int left, int top)
        {
            var savedCursorLeft = _console.CursorLeft;
            var savedCursorTop = _console.CursorTop;

            _console.SetCursorPosition(left, top);
            _console.BlankRestOfLine();
            _console.SetCursorPosition(savedCursorLeft, savedCursorTop);
        }

        private static string Spaces(int cnt)
        {
            return cnt < _spaces.Length
                ? (_spaces[cnt] ?? (_spaces[cnt] = new string(' ', cnt)))
                : new string(' ', cnt);
        }

        internal static int LengthInBufferCells(string str)
        {
            return LengthInBufferCells(str, 0, str.Length);
        }

        internal static int LengthInBufferCells(string str, int start, int end)
        {
            return MeasureForwardVT(str.Substring(start, end)).Columns;
        }

        internal static int LengthInBufferCells(StringBuilder sb, int start, int end)
        {
            return LengthInBufferCells(sb.ToString(), start, end);
        }

        private static string SubstringByCells(string text, int countOfCells)
        {
            return SubstringByCells(text, 0, countOfCells);
        }

        private static string SubstringByCells(string text, int start, int countOfCells)
        {
            int length = SubstringLengthByCells(text, start, countOfCells);
            return length == 0 ? string.Empty : text.Substring(start, length);
        }

        private static int SubstringLengthByCells(string text, int countOfCells)
        {
            return SubstringLengthByCells(text, 0, countOfCells);
        }

        private static int SubstringLengthByCells(string text, int start, int countOfCells)
        {
            return MeasureForward(text, start, int.MaxValue, countOfCells).Offset - start;
        }

        private static int SubstringLengthByCellsFromEnd(string text, int start, int countOfCells)
        {
            start = Math.Min(start + 1, text.Length);
            return start - MeasureBackward(text, start, int.MaxValue, countOfCells).Offset;
        }

        private static (int newStart, int newEnd) TrimSubstringInPlace(string text, int start, int end)
        {
            int newStart = start;
            int newEnd = end;

            for (; newStart <= end; newStart++)
            {
                if (!char.IsWhiteSpace(text[newStart]))
                {
                    break;
                }
            }

            for (; newEnd > newStart; newEnd--)
            {
                if (!char.IsWhiteSpace(text[newEnd]))
                {
                    break;
                }
            }

            // Return the new start/end after triming, or (-1, -1) if the substring only consists of whitespaces.
            return newStart > newEnd ? (-1, -1) : (newStart, newEnd);
        }
    }
}
